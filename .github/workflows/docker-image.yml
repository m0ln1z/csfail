name: Deploy Notification Bots

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        bot:
          - name: 35x
            image: m0ln1z/selenium-bot-35x
            bot_script: bot_35x.py
            bot_token_secret: BOT_TOKEN
            chat_id_secret: CHAT_ID
          - name: 234x
            image: m0ln1z/selenium-bot-234x
            bot_script: bot_234x.py
            bot_token_secret: BOT_TOKEN_234X
            chat_id_secret: CHAT_ID_234X

    steps:
      # 1. Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Формирование тега Docker-образа на основе короткого SHA коммита
      - name: Set Docker image tag
        id: set_tag
        run: |
          TAG=$(git rev-parse --short HEAD)
          echo "DOCKER_TAG=${TAG}" >> $GITHUB_ENV
          echo "Docker tag set to ${TAG}"

      # 3. Аутентификация в Docker Hub и получение JWT-токена
      - name: Authenticate with Docker Hub
        id: docker_auth
        run: |
          RESPONSE=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "${{ secrets.DOCKER_USERNAME }}", "password": "${{ secrets.DOCKER_ACCESS_TOKEN }}"}' https://hub.docker.com/v2/users/login/)
          TOKEN=$(echo $RESPONSE | jq -r .token)
          if [ "$TOKEN" == "null" ] || [ -z "$TOKEN" ]; then
            echo "Failed to obtain Docker Hub token."
            exit 1
          fi
          echo "DOCKER_JWT_TOKEN=${TOKEN}" >> $GITHUB_ENV
          echo "Docker Hub authentication successful."

      # 4. Создание Docker Hub репозитория, если он не существует
      - name: Create Docker Hub Repository if not exists
        run: |
          REPO_NAME=${{ matrix.bot.image##*/ }}
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: JWT $DOCKER_JWT_TOKEN" https://hub.docker.com/v2/repositories/m0ln1z/${REPO_NAME}/)
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Repository $REPO_NAME does not exist. Creating it..."
            CREATE_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -H "Authorization: JWT $DOCKER_JWT_TOKEN" -d '{"namespace": "m0ln1z", "name": "'$REPO_NAME'", "description": "Docker image for '$REPO_NAME'", "is_private": false}' https://hub.docker.com/v2/repositories/)
            if echo "$CREATE_RESPONSE" | grep -q '"name": "'$REPO_NAME'"'; then
              echo "Repository $REPO_NAME created successfully."
            else
              echo "Failed to create repository $REPO_NAME. Response: $CREATE_RESPONSE"
              exit 1
            fi
          else
            echo "Repository $REPO_NAME already exists."
          fi

      # 5. Логин в Docker Hub через CLI (для совместимости с Docker CLI)
      - name: Login to Docker Hub via CLI
        run: |
          echo ${{ env.DOCKER_JWT_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      # 6. Сборка и пуш Docker-образа с указанным скриптом бота
      - name: Build and push Docker image
        run: |
          docker build --build-arg BOT_SCRIPT=${{ matrix.bot.bot_script }} -t "${{ matrix.bot.image }}:${{ env.DOCKER_TAG }}" .
          docker push "${{ matrix.bot.image }}:${{ env.DOCKER_TAG }}"

      # 7. Настройка SSH-агента для использования SSH-ключей
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 8. Деплой на сервер
      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Connected to server."

            # Проверка наличия Docker
            if ! command -v docker &> /dev/null
            then
                echo "Docker не установлен. Устанавливаем Docker..."
                sudo apt-get update
                sudo apt-get install -y docker.io
                sudo systemctl start docker
                sudo systemctl enable docker
            else
                echo "Docker уже установлен."
            fi

            # Логин в Docker Hub
            echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Пулл обновлённого образа
            docker pull ${{ matrix.bot.image }}:${{ env.DOCKER_TAG }}

            # Проверка успешного пулла
            docker images | grep ${{ matrix.bot.image }}:${{ env.DOCKER_TAG }} && echo "Image pulled successfully." || { echo "Failed to pull image."; exit 1; }

            # Остановка и удаление старого контейнера
            docker stop selenium-bot-${{ matrix.bot.name }} || docker kill selenium-bot-${{ matrix.bot.name }} || true
            docker rm -f selenium-bot-${{ matrix.bot.name }} || true

            # Запуск нового контейнера с передачей переменных окружения
            docker run -d \
              --name selenium-bot-${{ matrix.bot.name }} \
              --restart=unless-stopped \
              --memory=2g \
              --memory-swap=2g \
              --cpus=2 \
              --shm-size=256m \
              -e BOT_TOKEN='${{ secrets[matrix.bot.bot_token_secret] }}' \
              -e CHAT_ID='${{ secrets[matrix.bot.chat_id_secret] }}' \
              ${{ matrix.bot.image }}:${{ env.DOCKER_TAG }}