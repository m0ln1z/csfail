name: Deploy Notification Bots

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        bot:
          - name: 35x
            image: selenium-bot-35xx
            bot_script: bot_35x.py
            bot_token_secret: BOT_TOKEN
            chat_id_secret: CHAT_ID
          - name: 234x
            image: selenium-bot-234xx
            bot_script: bot_234x.py
            bot_token_secret: BOT_TOKEN_234X
            chat_id_secret: CHAT_ID_234X

    steps:
      # 1. Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Формирование тега Docker-образа на основе короткого SHA коммита
      - name: Set Docker image tag
        id: set_tag
        run: |
          TAG=$(git rev-parse --short HEAD)
          echo "DOCKER_TAG=${TAG}" >> $GITHUB_ENV
          echo "Docker tag set to ${TAG}"

      # 3. Аутентификация в Docker Hub
      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "m0ln1z" --password-stdin

      # 4. Сборка и пуш Docker-образа
      - name: Build and push Docker image
        run: |
          docker build --build-arg BOT_SCRIPT=${{ matrix.bot.bot_script }} -t "m0ln1z/${{ matrix.bot.image }}:${{ env.DOCKER_TAG }}" .
          docker push "m0ln1z/${{ matrix.bot.image }}:${{ env.DOCKER_TAG }}"

      # 5. Деплой на сервер через SSH
      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            echo "Connected to server."

            # Проверка наличия Docker
            if ! command -v docker &> /dev/null
            then
                echo "Docker не установлен. Устанавливаем Docker..."
                sudo apt-get update
                sudo apt-get install -y docker.io
                sudo systemctl start docker
                sudo systemctl enable docker
            else
                echo "Docker уже установлен."
            fi

            # Аутентификация в Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "m0ln1z" --password-stdin

            # Пулл обновлённого образа
            echo "Pulling the Docker image..."
            if docker pull m0ln1z/${{ matrix.bot.image }}:${{ env.DOCKER_TAG }}; then
                echo "Image pulled successfully."
            else
                echo "Failed to pull image."
                exit 1
            fi

            # Надёжная проверка наличия образа
            if docker inspect --type=image m0ln1z/${{ matrix.bot.image }}:${{ env.DOCKER_TAG }} > /dev/null 2>&1; then
                echo "Image exists locally."
            else
                echo "Image not found after pull."
                exit 1
            fi

            # Остановка и удаление старого контейнера
            echo "Stopping and removing old container..."
            docker stop selenium-bot-${{ matrix.bot.name }} || true
            docker rm selenium-bot-${{ matrix.bot.name }} || true

            # Запуск нового контейнера
            echo "Starting new container..."
            docker run -d \
              --name selenium-bot-${{ matrix.bot.name }} \
              --restart=unless-stopped \
              --memory=2g \
              --memory-swap=2g \
              --cpus=2 \
              --shm-size=256m \
              -e BOT_TOKEN='${{ secrets[matrix.bot.bot_token_secret] }}' \
              -e CHAT_ID='${{ secrets[matrix.bot.chat_id_secret] }}' \
              m0ln1z/${{ matrix.bot.image }}:${{ env.DOCKER_TAG }}

            echo "Deployment completed successfully."